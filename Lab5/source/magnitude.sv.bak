// $Id: $
// File name:  magnitute.sv $
// Author: Rishab Verma      $
// Description: magintude.sv$


module magnitude
(

	input wire [16:0] in,
	output reg [15:0] out
);

/*
reg [15:0] sign = in;
reg [16:0] temp_in;

always_comb
begin
	if(in[16] == 1)
	begin
		temp_in = ~temp_in;
		temp_in = temp_in + 1'b1;
	end
	
	else
	begin
		temp_in = in;
	end

end
assign out = temp_in[15:0];
*/


	//Easier way to do thisss
	assign out = (in[16] ? (~in[15:0] + 1) : in[15:0]);


endmodule


/*
endmodule
`timescale 1ns /100ps

module adder_1bit
(
	input wire a,
	input wire b,
	input wire carry_in,
	
	output reg sum,
	output reg carry_out
);
 
always @ (a,b, carry_in)
   begin
      assert(( a == 1'b1) || (a == 1'b0))
      else $error("Input 'a' of component is not a digital logic value");

      assert((b == 1'b1) || (b == 1'b0))
      else $error("Input 'b' of component is not a digital logic value");

      assert((carry_in == 1'b1) || (carry_in == 1'b0))
      else $error("Input 'carry_in' of component is not a digital logic value");
	
   end



  assign sum = carry_in ^ (a ^ b);
  assign carry_out = ((! carry_in) & b & a) | (carry_in & (b | a));


   
   always @ (a, b, carry_in)
   begin
     #(2) assert (((a+b+carry_in)%2) == sum)
       else $error("Output 's' of first 1 bit adder is not correct");
   end
	

endmodule

*/

 
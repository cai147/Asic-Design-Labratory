// $ID: mg 147$
// File name: controller$  
// Author: Rishab Verma     $
// Lab Section: Friday 11 30$
// Description: $

module controller(
   input wire clk,
   input wire n_reset,
   input wire dr,
   input wire lc,
   input wire overflow,
   output reg cnt_up,
   output reg clear,
   output wire modwait,
   output reg [2:0] op,
   output reg [3:0] src1,
   output reg [3:0] src2,
   output reg [3:0] dest,
   output reg err
);

reg temp_modw;
reg next_modw;	
		

typedef enum bit [4:0] {Idle,Store, Zero, Sort1, Sort2, Sort3, Sort4, Mul1, Add1, Mul2, Sub1, Mul3, Add2, Mul4, Sub2, EIdle, Load1, Wait1, Load2, Wait2, Load3, Wait3, Load4, Wait4} states;
states current;
states next;

  

always_ff @ (posedge clk, negedge n_reset)
begin
	if(n_reset == 0) 
	begin
	   current <= Idle;
	   temp_modw <= 0;
	end 
	else 
	begin
	   current <= next;
	   temp_modw <= next_modw;	   
	end
end

assign next_modwait = temp_modw;
  






 
always_comb
begin
	cnt_up=0;
	
	err=0;

	next = current;
	next_modw = temp_modw;

clear=0;
	op=0;
	src1=0;
	src2=0;
	dest=0;
	
	case (current)
//STATE 1
	  Idle:
	    begin 
	       if (lc) 
		begin
	
		  next_modw=1;
		  next = Load1;

	       	end 

		else if (dr) 
		begin
		  next_modw=1;
		  next = Store;
	       end 
		
		else 
		begin
		  next_modw=0;
		  next = Idle;
	       end
	       cnt_up=0;
	       clear=0;
	       op=3'b000;
	       err=0;
	    end 
	  
//State 2
	Load1:
	    begin
	       next = Wait1;
	       cnt_up=0;
	       clear=1;
	       next_modw=0;
	       op=3'b011;
	       dest=6;
	       err=0;

	    end

//State 3
	  Wait1:
	    begin     
		if (lc) 
		begin
		  next = Load2;
		  next_modw = 1;
	       	end 
		
		else 
		begin
		  next = Wait1;
		  next_modw = 0;
	       	end
	       
		cnt_up=0;
	       clear=0;
	       op=3'b000;
	       err=0;
	    end
//State4
	  Load2:	    
	       begin
		       next = Wait2;
		       cnt_up=0;
		       clear=0;
		       next_modw=0;
		       op=3'b011;
		       dest=7;
		       err=0;
	       end

//State5

	  Wait2:
	    begin
	       if (lc) 
		begin
		  next = Load3;
		  next_modw = 1;
	        end 
		
		else 
		begin

		  next = Wait2;
		  next_modw = 0;
	       	end
	
	       cnt_up=0;
	       clear=0;
	       op=3'b000;
	       err=0;
	    end
//State6
	  Load3:
	    begin
	       next = Wait3;
	       cnt_up = 0;
	       clear = 0;
	       next_modw = 0;
	       op = 3'b011;
	       dest = 8;
	       err = 0;
	    end

//State 7
	  Wait3:
	    begin
	       if (lc) 
	       begin
		  next = Load4;
		  next_modw = 1;
	
	       end 
		
		else 
		begin
		  
			next = Wait3;
			next_modw = 0;
	       end

	       cnt_up=0;
	       clear=0;
	       op=3'b000;
	       err=0;
           end
	

//State 8
	  Load4:
	    begin
	       next = Idle;
	       cnt_up = 0;
	       clear = 0;
	       next_modw = 0;
	       op = 3'b011;
	       dest = 9;
	       err = 0;
	    end
	  
//State 9
	Store:
	    begin
	       if (dr) 
	       begin
		  next_modw=1;
		  next = Zero;
	       end 
	       else 
	       begin
		  next_modw=0;
		  next = EIdle;
	       end
	       
	       cnt_up=0;
	       clear=0;
	       op=3'b010;
	       dest=5;
	       err=0;
	
	    end
//State 10	
	  Zero:
	    begin
	       next_modw = 1;
	       op = 3'b101;
	       dest = 0;
	       src1 = 0;
	       src2 = 0;
	       next = Sort1;
	       cnt_up = 1;
	       clear = 0;
	   
	       err = 0;
	    end


//state 11
	  Sort1:
	    begin
	       next = Sort2;
	       cnt_up=0;
	       clear=0;
	       next_modw=1;
	       op=3'b001;
	       dest=1;
	       src1=2;
	       err=0;
	    end

//State 12
	  Sort2:
	    begin
	       next = Sort3;
	       cnt_up=0;
	       clear=0;
	       next_modw=1;
	       op=3'b001;
	       dest=2;
	       src1=3;
	       err=0;
	    end
	
//State 13
	  Sort3:
	    begin
	       next = Sort4;
	       cnt_up=0;
	       clear=0;
	       next_modw=1;
	       op=3'b001;
	       dest=3;
	       src1=4;
	       err=0;
	    end


//State 14
	  Sort4:
	    begin
	       next = Mul1;
	       cnt_up=0;
	       clear=0;
	       next_modw=1;
	       op=3'b001;
	       dest=4;
	       src1=5;
	       err=0;
	    end


//State 15
	  Mul1:
	    begin
	       next = Add1;
	       cnt_up=0;
	       clear=0;
	       next_modw=1;
	       op=3'b110;
	       dest=10;
	       src1=1;
	       src2=6;
	       err=0;
	    end
//State16
	  Add1:
	    begin
	       if (overflow) 
		begin
		  next_modw=0;
		  next = EIdle;
	
	       end 
	       else 	
		begin
		  next_modw=1;
		  next = Mul2;
	       end

	       cnt_up = 0;
	       clear = 0;
	       op = 3'b100;
	       dest = 0;
	       src1 = 0;
	       src2 = 10;
	       err = 0;
	    end
	  

//state 17

	Mul2:
	    begin
	       next = Sub1;
	       cnt_up=0;
	       clear=0;
	       

		next_modw=1;
	       op=3'b110;
	       dest=10;
	       src1=2;
	       src2=7;
	       err=0;
	    end
	//state18  
	Sub1:
	    begin
	       if (overflow) begin
		  next_modw=0;
		  next = EIdle;
	       end else begin
		  next_modw=1;
		  next = Mul3;
	       end
	       cnt_up=0;
	       clear=0;
	       op=3'b101;
	       dest=0;
	       src1=0;
	       src2=10;
	       err=0;
	    end
	//state19  
	Mul3:
	    begin
	       next = Add2;
	       cnt_up=0;
	       clear=0;
	       next_modw=1;
	       op=3'b110;
	       dest=10;
	       src1=3;
	       src2=8;
	       err=0;
	    end
//state20
	  Add2:
	    begin
	       if (overflow) 
		begin
		  next_modw=0;
		  next = EIdle;

	       end 
		else 
		begin
		  next_modw=1;
		  next = Mul4;
	       end
	       cnt_up=0;
	       clear=0;
	       op=3'b100;
	       dest=0;
	       src1=0;
	       src2=10;
	       err=0;
	    end
	  
//state21
	Mul4:
	    begin
	       next = Sub2;
	       cnt_up=0;
	       clear=0;
	       next_modw=1;
	       op=3'b110;
	       dest=10;
	       src1=4;
	       src2=9;
	       err=0;
	    end
	//state22  
	Sub2:
	    begin
	       if (overflow) 
		begin
		  next_modw=0;
		  next = EIdle;
	       end 
		else 

		begin
		  next_modw=0;
		  next = Idle;
	       end
	       cnt_up=0;
	       clear=0;
	       op=3'b101;
	       dest=0;
	       src1=0;
	       src2=10;
	       err=0;
	    end
	





//state23  
	EIdle:
	    begin
	       if (dr) 
		begin
		  next_modw=1;
		  next = Store;
	       end 
	       else 
		begin
		  next_modw=0;
		  next = EIdle;
	       end
	       
		cnt_up=0;
	       clear=0;
	       op=3'b000;
	       err=1;
	    end
	
	endcase





     end

endmodule


/*
endmodule
`timescale 1ns /100ps

module adder_1bit
(
	input wire a,
	input wire b,
	input wire carry_in,
	
	output reg sum,
	output reg carry_out
);
 
always @ (a,b, carry_in)
   begin
      assert(( a == 1'b1) || (a == 1'b0))
      else $error("Input 'a' of component is not a digital logic value");

      assert((b == 1'b1) || (b == 1'b0))
      else $error("Input 'b' of component is not a digital logic value");

      assert((carry_in == 1'b1) || (carry_in == 1'b0))
      else $error("Input 'carry_in' of component is not a digital logic value");
	
   end



  assign sum = carry_in ^ (a ^ b);
  assign carry_out = ((! carry_in) & b & a) | (carry_in & (b | a));


   
   always @ (a, b, carry_in)
   begin
     #(2) assert (((a+b+carry_in)%2) == sum)
       else $error("Output 's' of first 1 bit adder is not correct");
   end
	

endmodule

*/

/*
endmodule
`timescale 1ns /100ps

module adder_1bit
(
	input wire a,
	input wire b,
	input wire carry_in,
	
	output reg sum,
	output reg carry_out
);
 
always @ (a,b, carry_in)
   begin
      assert(( a == 1'b1) || (a == 1'b0))
      else $error("Input 'a' of component is not a digital logic value");

      assert((b == 1'b1) || (b == 1'b0))
      else $error("Input 'b' of component is not a digital logic value");

      assert((carry_in == 1'b1) || (carry_in == 1'b0))
      else $error("Input 'carry_in' of component is not a digital logic value");
	
   end



  assign sum = carry_in ^ (a ^ b);
  assign carry_out = ((! carry_in) & b & a) | (carry_in & (b | a));


   
   always @ (a, b, carry_in)
   begin
     #(2) assert (((a+b+carry_in)%2) == sum)
       else $error("Output 's' of first 1 bit adder is not correct");
   end
	

endmodule

*/

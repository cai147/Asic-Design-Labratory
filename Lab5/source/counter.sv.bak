
// $ID: mg 147$
// File name: counter$  
// Author: Rishab Verma     $
// Lab Section: Friday 11 30$
// Description: $


module counter
(
	input	wire clk,
	input	wire n_reset,
	input	wire cnt_up,
	input	wire clear,
	output 	wire one_k_samples
);

//call flex counter here

flex_counter #(10) COUNT
(
      .clk(clk),
      .n_rst(n_reset),
      .clear(clear),



      .count_enable(cnt_up),
      .rollover_val(10'd1000),



      .rollover_flag(one_k_samples)
);

endmodule

// $ID: mg 147$
// File name: flex counter$  
// Author: Rishab Verma     $
// Lab Section: Friday 11 30$
// Description: $

/*
endmodule
`timescale 1ns /100ps

module adder_1bit
(
	input wire a,
	input wire b,
	input wire carry_in,
	
	output reg sum,
	output reg carry_out
);
 
always @ (a,b, carry_in)
   begin
      assert(( a == 1'b1) || (a == 1'b0))
      else $error("Input 'a' of component is not a digital logic value");

      assert((b == 1'b1) || (b == 1'b0))
      else $error("Input 'b' of component is not a digital logic value");

      assert((carry_in == 1'b1) || (carry_in == 1'b0))
      else $error("Input 'carry_in' of component is not a digital logic value");
	
   end



  assign sum = carry_in ^ (a ^ b);
  assign carry_out = ((! carry_in) & b & a) | (carry_in & (b | a));


   
   always @ (a, b, carry_in)
   begin
     #(2) assert (((a+b+carry_in)%2) == sum)
       else $error("Output 's' of first 1 bit adder is not correct");
   end
	

endmodule

*/
